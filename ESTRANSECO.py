import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "123456789"))

# === –°—Ç–∞–Ω–∏ ===
(
    CHOOSING, DATE, CURRENCY, CAR_RENTAL, MAINTENANCE, CLIENT_PURCHASES,
    ROAD_FUEL, FERRY, PHONE, ADVERTISING, FOOD_HOME,
    SHOPPING_HOME, BORDER, NOVA_POSHTA, TOTAL_INCOME
) = range(15)

MAIN_MENU = ReplyKeyboardMarkup(
    [["–í–Ω–µ—Å—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö—ñ–¥"]],
    resize_keyboard=True
)

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=MAIN_MENU)
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–í–Ω–µ—Å—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö—ñ–¥":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–Ω–∞–ø—Ä. 2025-04-30):")
        return DATE
    await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    return CHOOSING

async def get_field(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str, next_state: int, prompt: str):
    context.user_data[key] = float(update.message.text.replace(',', '.'))
    await update.message.reply_text(prompt)
    return next_state

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–æ—Ö–æ–¥—É (USD, EUR, SEK, NOK):")
    return CURRENCY

async def get_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    currency = update.message.text.strip().upper()
    if currency not in ["USD", "EUR", "SEK", "NOK"]:
        await update.message.reply_text("–í–∞–ª—é—Ç–∞ –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∞ –∑: USD, EUR, SEK, NOK. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return CURRENCY
    context.user_data['currency'] = currency
    await update.message.reply_text("–û—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ (–≥—Ä–Ω):")
    return CAR_RENTAL

async def get_car_rental(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'car_rental', MAINTENANCE, "–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ (–≥—Ä–Ω):")

async def get_maintenance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'maintenance', CLIENT_PURCHASES, "–ü–æ–∫—É–ø–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞–º (–≥—Ä–Ω):")

async def get_client_purchases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'client_purchases', ROAD_FUEL, "–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –¥–æ—Ä–æ–≥—É —ñ –ø–∞–ª–∏–≤–æ (–≥—Ä–Ω):")

async def get_road_fuel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'road_fuel', FERRY, "–ü–∞—Ä–æ–º (–≥—Ä–Ω):")

async def get_ferry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'ferry', PHONE, "–¢–µ–ª–µ—Ñ–æ–Ω (–≥—Ä–Ω):")

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'phone', ADVERTISING, "–†–µ–∫–ª–∞–º–∞ (–≥—Ä–Ω):")

async def get_advertising(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'advertising', FOOD_HOME, "–ü—Ä–æ–¥—É–∫—Ç–∏ –¥–æ–¥–æ–º—É (–≥—Ä–Ω):")

async def get_food_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'food_home', SHOPPING_HOME, "–ü–æ–∫—É–ø–∫–∏ –¥–æ–¥–æ–º—É (–≥—Ä–Ω):")

async def get_shopping_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'shopping_home', BORDER, "–ö–æ—Ä–¥–æ–Ω (–≥—Ä–Ω):")

async def get_border(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'border', NOVA_POSHTA, "–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–≥—Ä–Ω):")

async def get_nova_poshta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await get_field(update, context, 'nova_poshta', TOTAL_INCOME, "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (–≥—Ä–Ω):")

async def get_total_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['total_income'] = float(update.message.text.replace(',', '.'))

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç —ñ —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥—É
    expenses = sum([
        context.user_data[key] for key in (
            'car_rental', 'maintenance', 'client_purchases', 'road_fuel', 'ferry',
            'phone', 'advertising', 'food_home', 'shopping_home', 'border', 'nova_poshta'
        )
    ])
    income = context.user_data['total_income']
    net_income = income - expenses

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
    trip_date = context.user_data['date']
    currency = context.user_data['currency']
    filename = f"finance_{trip_date}.csv"
    file_exists = os.path.exists(filename)

    with open(filename, 'a', encoding='utf-8', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow([
                "–î–∞—Ç–∞", "–í–∞–ª—é—Ç–∞", "–û—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ", "–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "–ö–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –ø–æ–∫—É–ø–∫–∏",
                "–î–æ—Ä–æ–≥–∞+–ø–∞–ª–∏–≤–æ", "–ü–∞—Ä–æ–º", "–¢–µ–ª–µ—Ñ–æ–Ω", "–†–µ–∫–ª–∞–º–∞", "–ü—Ä–æ–¥—É–∫—Ç–∏ –¥–æ–¥–æ–º—É",
                "–ü–æ–∫—É–ø–∫–∏ –¥–æ–¥–æ–º—É", "–ö–æ—Ä–¥–æ–Ω", "–ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ü—Ä–∏–±—É—Ç–æ–∫",
                "–í–∏—Ç—Ä–∞—Ç–∏", "–ß–∏—Å—Ç–∏–π –¥–æ—Ö—ñ–¥", "–î–∞—Ç–∞ –∑–∞–ø–∏—Å—É"
            ])
        writer.writerow([
            trip_date, currency, context.user_data['car_rental'], context.user_data['maintenance'],
            context.user_data['client_purchases'], context.user_data['road_fuel'],
            context.user_data['ferry'], context.user_data['phone'], context.user_data['advertising'],
            context.user_data['food_home'], context.user_data['shopping_home'],
            context.user_data['border'], context.user_data['nova_poshta'],
            income, expenses, net_income, datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ])

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!\n–í–∞–ª—é—Ç–∞: {currency}\n"
        f"–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {expenses:.2f} {currency}\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {income:.2f} {currency}\n"
        f"–ß–∏—Å—Ç–∏–π –¥–æ—Ö—ñ–¥: {net_income:.2f} {currency}"
    )

    await context.bot.send_document(
        chat_id=ADMIN_CHAT_ID,
        document=open(filename, "rb"),
        caption=f"üìä –ó–≤—ñ—Ç –ø–æ—ó–∑–¥–∫–∏: {trip_date}"
    )

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=MAIN_MENU)
    return CHOOSING

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_currency)],
            CAR_RENTAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car_rental)],
            MAINTENANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_maintenance)],
            CLIENT_PURCHASES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_client_purchases)],
            ROAD_FUEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_road_fuel)],
            FERRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ferry)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ADVERTISING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_advertising)],
            FOOD_HOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_food_home)],
            SHOPPING_HOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_shopping_home)],
            BORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_border)],
            NOVA_POSHTA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nova_poshta)],
            TOTAL_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_total_income)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    print("üü¢ Finance Bot is running...")
    app.run_polling()
